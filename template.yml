AWSTemplateFormatVersion: 2010-09-09
Resources:
  CloudMap:
    Properties:
      Description: Service Map for Docker Compose project sleshainsurance
      Name: sleshainsurance.local
      Vpc: vpc-0d94de893597e0ff4
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
  Cluster:
    Properties:
      ClusterName: sleshainsurance
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
    Type: AWS::ECS::Cluster
  InsurancedbService:
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: SleshainsnetworkNetwork
          Subnets:
          - subnet-0d9e914e3146288f2
          - subnet-0ed115667dd803f27
          - subnet-0e87b404422336b54
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - InsurancedbServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: insurancedb
      TaskDefinition:
        Ref: InsurancedbTaskDefinition
    Type: AWS::ECS::Service
  InsurancedbServiceDiscoveryEntry:
    Properties:
      Description: '"insurancedb" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: insurancedb
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  InsurancedbTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - sleshainsurance.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: Insurancedb_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Insurancedb_ResolvConf_InitContainer
        Environment:
        - Name: MYSQL_DATABASE
          Value: sleshainsurance
        - Name: MYSQL_ROOT_PASSWORD
          Value: my-secret-pw
        Essential: true
        Image: docker.io/library/mysql:5.7@sha256:6306f106a056e24b3a2582a59a4c84cd199907f826eff27df36406f227cd9a7d
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: insurancedb
      Cpu: "256"
      ExecutionRoleArn:
        Ref: InsurancedbTaskExecutionRole
      Family: sleshainsurance-insurancedb
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  InsurancedbTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: insurancedb
    Type: AWS::IAM::Role
  KafkaService:
    DependsOn:
    - ZookeeperService
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: SleshainsnetworkNetwork
          Subnets:
          - subnet-0d9e914e3146288f2
          - subnet-0ed115667dd803f27
          - subnet-0e87b404422336b54
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - KafkaServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: kafka
      TaskDefinition:
        Ref: KafkaTaskDefinition
    Type: AWS::ECS::Service
  KafkaServiceDiscoveryEntry:
    Properties:
      Description: '"kafka" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: kafka
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  KafkaTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - sleshainsurance.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: Kafka_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Kafka_ResolvConf_InitContainer
        Environment:
        - Name: ALLOW_PLAINTEXT_LISTENER
          Value: "yes"
        - Name: KAFKA_BROKER_ID
          Value: "1"
        - Name: KAFKA_CFG_ADVERTISED_LISTENERS
          Value: PLAINTEXT://kafka:9092
        - Name: KAFKA_CFG_LISTENERS
          Value: PLAINTEXT://:9092
        - Name: KAFKA_CFG_ZOOKEEPER_CONNECT
          Value: zookeeper:2181
        Essential: true
        Image: docker.io/bitnami/kafka:latest@sha256:8ed09dd08e903fcd1e15ed95d5e29d463968fe4cfb7b9719cef511dac71120ed
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: kafka
      Cpu: "256"
      ExecutionRoleArn:
        Ref: KafkaTaskExecutionRole
      Family: sleshainsurance-kafka
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  KafkaTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: kafka
    Type: AWS::IAM::Role
  LogGroup:
    Properties:
      LogGroupName: /docker-compose/sleshainsurance
    Type: AWS::Logs::LogGroup
  PlanmsService:
    DependsOn:
    - InsurancedbService
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: SleshainsnetworkNetwork
          Subnets:
          - subnet-0d9e914e3146288f2
          - subnet-0ed115667dd803f27
          - subnet-0e87b404422336b54
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - PlanmsServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: planms
      TaskDefinition:
        Ref: PlanmsTaskDefinition
    Type: AWS::ECS::Service
  PlanmsServiceDiscoveryEntry:
    Properties:
      Description: '"planms" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: planms
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  PlanmsTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - sleshainsurance.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: Planms_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Planms_ResolvConf_InitContainer
        Environment:
        - Name: SPRING_APPLICATION_JSON
          Value: '{ "spring.application.name": "planms", "spring.datasource.url"  :
            "jdbc:mysql://insurancedb:3306/sleshainsurance?useSSL=false", "spring.datasource.username"
            : "root", "spring.datasource.password" : "my-secret-pw", "spring.jpa.properties.hibernate.dialect"
            : "org.hibernate.dialect.MySQL5InnoDBDialect", "spring.jpa.hibernate.ddl-auto"
            : "update", "spring.cache.type":"redis", "spring.redis.host":"rediscache",
            "spring.redis.port":"6379", "configs:spring.cache.cache-names":"plan,
            userPlan"}'
        Essential: true
        Image: docker.io/viggy6/sleshainsurance-planms:latest@sha256:616841f58100d9dbd76f1609920e6c6d9537991e26f4a3622b58510d278d8d38
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: planms
      Cpu: "256"
      ExecutionRoleArn:
        Ref: PlanmsTaskExecutionRole
      Family: sleshainsurance-planms
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  PlanmsTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: planms
    Type: AWS::IAM::Role
  ProcessmsService:
    DependsOn:
    - PlanmsService
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: SleshainsnetworkNetwork
          Subnets:
          - subnet-0d9e914e3146288f2
          - subnet-0ed115667dd803f27
          - subnet-0e87b404422336b54
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - ProcessmsServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: processms
      TaskDefinition:
        Ref: ProcessmsTaskDefinition
    Type: AWS::ECS::Service
  ProcessmsServiceDiscoveryEntry:
    Properties:
      Description: '"processms" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: processms
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  ProcessmsTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - sleshainsurance.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: Processms_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Processms_ResolvConf_InitContainer
        Environment:
        - Name: SPRING_APPLICATION_JSON
          Value: '{ "spring.application.name": "processms", "spring.datasource.url"  :
            "jdbc:mysql://insurancedb:3306/sleshainsurance?useSSL=false", "spring.datasource.username"
            : "root", "spring.datasource.password" : "my-secret-pw", "spring.jpa.properties.hibernate.dialect"
            : "org.hibernate.dialect.MySQL5InnoDBDialect", "spring.jpa.hibernate.ddl-auto"
            : "update"}'
        Essential: true
        Image: docker.io/viggy6/sleshainsurance-processms:latest@sha256:0bf8dab5fdd5dc5183d8649c23cf43ffb8dcff228669939a0ff3d85916d2235b
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: processms
      Cpu: "256"
      ExecutionRoleArn:
        Ref: ProcessmsTaskExecutionRole
      Family: sleshainsurance-processms
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  ProcessmsTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: processms
    Type: AWS::IAM::Role
  RediscacheService:
    DependsOn:
    - InsurancedbService
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: SleshainsnetworkNetwork
          Subnets:
          - subnet-0d9e914e3146288f2
          - subnet-0ed115667dd803f27
          - subnet-0e87b404422336b54
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - RediscacheServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: rediscache
      TaskDefinition:
        Ref: RediscacheTaskDefinition
    Type: AWS::ECS::Service
  RediscacheServiceDiscoveryEntry:
    Properties:
      Description: '"rediscache" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: rediscache
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  RediscacheTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - sleshainsurance.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: Rediscache_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Rediscache_ResolvConf_InitContainer
        Essential: true
        Image: docker.io/viggy6/sleshainsurance-rediscache:latest@sha256:198612207c26263ab8549e000a0cc7138cb0b32101917a253321bd23992f1eae
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: rediscache
      Cpu: "256"
      ExecutionRoleArn:
        Ref: RediscacheTaskExecutionRole
      Family: sleshainsurance-rediscache
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  RediscacheTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: rediscache
    Type: AWS::IAM::Role
  ReverseproxyService:
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: SleshainsnetworkNetwork
          Subnets:
          - subnet-0d9e914e3146288f2
          - subnet-0ed115667dd803f27
          - subnet-0e87b404422336b54
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - ReverseproxyServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: reverseproxy
      TaskDefinition:
        Ref: ReverseproxyTaskDefinition
    Type: AWS::ECS::Service
  ReverseproxyServiceDiscoveryEntry:
    Properties:
      Description: '"reverseproxy" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: reverseproxy
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  ReverseproxyTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - sleshainsurance.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: Reverseproxy_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Reverseproxy_ResolvConf_InitContainer
        Essential: true
        Image: docker.io/viggy6/sleshainsurance-reverseproxy:latest@sha256:9108f1d4410d00d3373ba2463d704480b2a8bbbe6a59304a4ba9094d3784855f
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: reverseproxy
      Cpu: "256"
      ExecutionRoleArn:
        Ref: ReverseproxyTaskExecutionRole
      Family: sleshainsurance-reverseproxy
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  ReverseproxyTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: reverseproxy
    Type: AWS::IAM::Role
  SleshainsnetworkNetwork:
    Properties:
      GroupDescription: sleshainsurance Security Group for sleshainsnetwork network
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.network
        Value: sleshainsurance_sleshainsnetwork
      VpcId: vpc-0d94de893597e0ff4
    Type: AWS::EC2::SecurityGroup
  SleshainsnetworkNetworkIngress:
    Properties:
      Description: Allow communication within network sleshainsnetwork
      GroupId:
        Ref: SleshainsnetworkNetwork
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: SleshainsnetworkNetwork
    Type: AWS::EC2::SecurityGroupIngress
  SleshainsuranceuiService:
    DependsOn:
    - PlanmsService
    - UsermsService
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: SleshainsnetworkNetwork
          Subnets:
          - subnet-0d9e914e3146288f2
          - subnet-0ed115667dd803f27
          - subnet-0e87b404422336b54
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - SleshainsuranceuiServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: sleshainsuranceui
      TaskDefinition:
        Ref: SleshainsuranceuiTaskDefinition
    Type: AWS::ECS::Service
  SleshainsuranceuiServiceDiscoveryEntry:
    Properties:
      Description: '"sleshainsuranceui" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: sleshainsuranceui
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  SleshainsuranceuiTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - sleshainsurance.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: Sleshainsuranceui_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Sleshainsuranceui_ResolvConf_InitContainer
        Essential: true
        Image: docker.io/viggy6/sleshainsurance-sleshainsuranceui:latest@sha256:1e7348d2ff6132190c623e215c9eace6ed7ab20a5fee15e4ea49fd3a7e326680
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: sleshainsuranceui
      Cpu: "256"
      ExecutionRoleArn:
        Ref: SleshainsuranceuiTaskExecutionRole
      Family: sleshainsurance-sleshainsuranceui
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  SleshainsuranceuiTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: sleshainsuranceui
    Type: AWS::IAM::Role
  UsermsService:
    DependsOn:
    - InsurancedbService
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: SleshainsnetworkNetwork
          Subnets:
          - subnet-0d9e914e3146288f2
          - subnet-0ed115667dd803f27
          - subnet-0e87b404422336b54
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - UsermsServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: userms
      TaskDefinition:
        Ref: UsermsTaskDefinition
    Type: AWS::ECS::Service
  UsermsServiceDiscoveryEntry:
    Properties:
      Description: '"userms" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: userms
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  UsermsTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - sleshainsurance.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: Userms_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Userms_ResolvConf_InitContainer
        Environment:
        - Name: SPRING_APPLICATION_JSON
          Value: '{ "spring.application.name": "userms", "spring.datasource.url"  :
            "jdbc:mysql://insurancedb:3306/sleshainsurance?useSSL=false", "spring.datasource.username"
            : "root", "spring.datasource.password" : "my-secret-pw", "spring.jpa.properties.hibernate.dialect"
            : "org.hibernate.dialect.MySQL5InnoDBDialect", "spring.jpa.hibernate.ddl-auto"
            : "update"}'
        Essential: true
        Image: docker.io/viggy6/sleshainsurance-userms:latest@sha256:6ff78bea56e1ff230958e5c813fabe321f9fbd1bb919cf438a7c241156751672
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: userms
      Cpu: "256"
      ExecutionRoleArn:
        Ref: UsermsTaskExecutionRole
      Family: sleshainsurance-userms
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  UsermsTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: userms
    Type: AWS::IAM::Role
  ZookeeperService:
    Properties:
      Cluster:
        Fn::GetAtt:
        - Cluster
        - Arn
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: SleshainsnetworkNetwork
          Subnets:
          - subnet-0d9e914e3146288f2
          - subnet-0ed115667dd803f27
          - subnet-0e87b404422336b54
      PlatformVersion: 1.4.0
      PropagateTags: SERVICE
      SchedulingStrategy: REPLICA
      ServiceRegistries:
      - RegistryArn:
          Fn::GetAtt:
          - ZookeeperServiceDiscoveryEntry
          - Arn
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: zookeeper
      TaskDefinition:
        Ref: ZookeeperTaskDefinition
    Type: AWS::ECS::Service
  ZookeeperServiceDiscoveryEntry:
    Properties:
      Description: '"zookeeper" service discovery entry in Cloud Map'
      DnsConfig:
        DnsRecords:
        - TTL: 60
          Type: A
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: zookeeper
      NamespaceId:
        Ref: CloudMap
    Type: AWS::ServiceDiscovery::Service
  ZookeeperTaskDefinition:
    Properties:
      ContainerDefinitions:
      - Command:
        - us-east-1.compute.internal
        - sleshainsurance.local
        Essential: false
        Image: docker/ecs-searchdomain-sidecar:1.0
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: Zookeeper_ResolvConf_InitContainer
      - DependsOn:
        - Condition: SUCCESS
          ContainerName: Zookeeper_ResolvConf_InitContainer
        Environment:
        - Name: ALLOW_ANONYMOUS_LOGIN
          Value: "yes"
        Essential: true
        Image: docker.io/bitnami/zookeeper:latest@sha256:ab14d5d3d0db456c3b7aadd5e2c5f3ed6010aa1d9e8501dfbe669dd528f7f216
        LinuxParameters: {}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: LogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: sleshainsurance
        Name: zookeeper
      Cpu: "256"
      ExecutionRoleArn:
        Ref: ZookeeperTaskExecutionRole
      Family: sleshainsurance-zookeeper
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
    Type: AWS::ECS::TaskDefinition
  ZookeeperTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Condition: {}
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Tags:
      - Key: com.docker.compose.project
        Value: sleshainsurance
      - Key: com.docker.compose.service
        Value: zookeeper
    Type: AWS::IAM::Role
